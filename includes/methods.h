#ifndef _D3DVTBL_H
#define _D3DVTBL_H
#include <stdint.h>
#include <algorithm>
#include <vector>

class VTBL
{
private:
    virtual std::vector<const char*>& GetMethods() = 0;
public:
    const auto GetNumberOfMethods() {
        return GetMethods().size();
    }
    const auto GetIndex(const char* name) {
        auto iter = std::find(std::begin(GetMethods()), std::end(GetMethods()), name);
        if (iter != std::end(GetMethods()))
            return (int32_t)std::distance(std::begin(GetMethods()), iter);
        else
            return (int32_t)-1;
    }
    const auto GetMethod(int32_t index) {
        if (index < static_cast<int32_t>(GetNumberOfMethods()))
            return GetMethods()[index];
        else
            return "";
    }
};

class IDirect3D8VTBL : public VTBL
{
private:
    std::vector<const char*>& GetMethods() override {
        static std::vector<const char*> methodsNames {
            "QueryInterface",
            "AddRef",
            "Release",
            "RegisterSoftwareDevice",
            "GetAdapterCount",
            "GetAdapterIdentifier",
            "GetAdapterModeCount",
            "EnumAdapterModes",
            "GetAdapterDisplayMode",
            "CheckDeviceType",
            "CheckDeviceFormat",
            "CheckDeviceMultiSampleType",
            "CheckDepthStencilMatch",
            "GetDeviceCaps",
            "GetAdapterMonitor",
            "CreateDevice",
        };
        return methodsNames;
    }
};

class IDirect3D9VTBL : public VTBL
{
private:
    std::vector<const char*>& GetMethods() override {
        static std::vector<const char*> methodsNames {
            "QueryInterface",
            "AddRef",
            "Release",
            "RegisterSoftwareDevice",
            "GetAdapterCount",
            "GetAdapterIdentifier",
            "GetAdapterModeCount",
            "EnumAdapterModes",
            "GetAdapterDisplayMode",
            "CheckDeviceType",
            "CheckDeviceFormat",
            "CheckDeviceMultiSampleType",
            "CheckDepthStencilMatch",
            "CheckDeviceFormatConversion",
            "GetDeviceCaps",
            "GetAdapterMonitor",
            "CreateDevice",
        };
        return methodsNames;
    }
};

class IDirect3DDevice8VTBL : public VTBL
{
private:
    std::vector<const char*>& GetMethods() override {
        static std::vector<const char*> methodsNames {
            "QueryInterface",
            "AddRef",
            "Release",
            "TestCooperativeLevel",
            "GetAvailableTextureMem",
            "ResourceManagerDiscardBytes",
            "GetDirect3D",
            "GetDeviceCaps",
            "GetDisplayMode",
            "GetCreationParameters",
            "SetCursorProperties",
            "SetCursorPosition",
            "ShowCursor",
            "CreateAdditionalSwapChain",
            "Reset",
            "Present",
            "GetBackBuffer",
            "GetRasterStatus",
            "SetGammaRamp",
            "GetGammaRamp",
            "CreateTexture",
            "CreateVolumeTexture",
            "CreateCubeTexture",
            "CreateVertexBuffer",
            "CreateIndexBuffer",
            "CreateRenderTarget",
            "CreateDepthStencilSurface",
            "CreateImageSurface",
            "CopyRects",
            "UpdateTexture",
            "GetFrontBuffer",
            "SetRenderTarget",
            "GetRenderTarget",
            "GetDepthStencilSurface",
            "BeginScene",
            "EndScene",
            "Clear",
            "SetTransform",
            "GetTransform",
            "MultiplyTransform",
            "SetViewport",
            "GetViewport",
            "SetMaterial",
            "GetMaterial",
            "SetLight",
            "GetLight",
            "LightEnable",
            "GetLightEnable",
            "SetClipPlane",
            "GetClipPlane",
            "SetRenderState",
            "GetRenderState",
            "BeginStateBlock",
            "EndStateBlock",
            "ApplyStateBlock",
            "CaptureStateBlock",
            "DeleteStateBlock",
            "CreateStateBlock",
            "SetClipStatus",
            "GetClipStatus",
            "GetTexture",
            "SetTexture",
            "GetTextureStageState",
            "SetTextureStageState",
            "ValidateDevice",
            "GetInfo",
            "SetPaletteEntries",
            "GetPaletteEntries",
            "SetCurrentTexturePalette",
            "GetCurrentTexturePalette",
            "DrawPrimitive",
            "DrawIndexedPrimitive",
            "DrawPrimitiveUP",
            "DrawIndexedPrimitiveUP",
            "ProcessVertices",
            "CreateVertexShader",
            "SetVertexShader",
            "GetVertexShader",
            "DeleteVertexShader",
            "SetVertexShaderConstant",
            "GetVertexShaderConstant",
            "GetVertexShaderDeclaration",
            "GetVertexShaderFunction",
            "SetStreamSource",
            "GetStreamSource",
            "SetIndices",
            "GetIndices",
            "CreatePixelShader",
            "SetPixelShader",
            "GetPixelShader",
            "DeletePixelShader",
            "SetPixelShaderConstant",
            "GetPixelShaderConstant",
            "GetPixelShaderFunction",
            "DrawRectPatch",
            "DrawTriPatch",
            "DeletePatch",
        };
        return methodsNames;
    }
};

class IDirect3DDevice9VTBL : public VTBL
{
private:
    std::vector<const char*>& GetMethods() override {
        static std::vector<const char*> methodsNames {
            "QueryInterface",
            "AddRef",
            "Release",
            "TestCooperativeLevel",
            "GetAvailableTextureMem",
            "EvictManagedResources",
            "GetDirect3D",
            "GetDeviceCaps",
            "GetDisplayMode",
            "GetCreationParameters",
            "SetCursorProperties",
            "SetCursorPosition",
            "ShowCursor",
            "CreateAdditionalSwapChain",
            "GetSwapChain",
            "GetNumberOfSwapChains",
            "Reset",
            "Present",
            "GetBackBuffer",
            "GetRasterStatus",
            "SetDialogBoxMode",
            "SetGammaRamp",
            "GetGammaRamp",
            "CreateTexture",
            "CreateVolumeTexture",
            "CreateCubeTexture",
            "CreateVertexBuffer",
            "CreateIndexBuffer",
            "CreateRenderTarget",
            "CreateDepthStencilSurface",
            "UpdateSurface",
            "UpdateTexture",
            "GetRenderTargetData",
            "GetFrontBufferData",
            "StretchRect",
            "ColorFill",
            "CreateOffscreenPlainSurface",
            "SetRenderTarget",
            "GetRenderTarget",
            "SetDepthStencilSurface",
            "GetDepthStencilSurface",
            "BeginScene",
            "EndScene",
            "Clear",
            "SetTransform",
            "GetTransform",
            "MultiplyTransform",
            "SetViewport",
            "GetViewport",
            "SetMaterial",
            "GetMaterial",
            "SetLight",
            "GetLight",
            "LightEnable",
            "GetLightEnable",
            "SetClipPlane",
            "GetClipPlane",
            "SetRenderState",
            "GetRenderState",
            "CreateStateBlock",
            "BeginStateBlock",
            "EndStateBlock",
            "SetClipStatus",
            "GetClipStatus",
            "GetTexture",
            "SetTexture",
            "GetTextureStageState",
            "SetTextureStageState",
            "GetSamplerState",
            "SetSamplerState",
            "ValidateDevice",
            "SetPaletteEntries",
            "GetPaletteEntries",
            "SetCurrentTexturePalette",
            "GetCurrentTexturePalette",
            "SetScissorRect",
            "GetScissorRect",
            "SetSoftwareVertexProcessing",
            "GetSoftwareVertexProcessing",
            "SetNPatchMode",
            "GetNPatchMode",
            "DrawPrimitive",
            "DrawIndexedPrimitive",
            "DrawPrimitiveUP",
            "DrawIndexedPrimitiveUP",
            "ProcessVertices",
            "CreateVertexDeclaration",
            "SetVertexDeclaration",
            "GetVertexDeclaration",
            "SetFVF",
            "GetFVF",
            "CreateVertexShader",
            "SetVertexShader",
            "GetVertexShader",
            "SetVertexShaderConstantF",
            "GetVertexShaderConstantF",
            "SetVertexShaderConstantI",
            "GetVertexShaderConstantI",
            "SetVertexShaderConstantB",
            "GetVertexShaderConstantB",
            "SetStreamSource",
            "GetStreamSource",
            "SetStreamSourceFreq",
            "GetStreamSourceFreq",
            "SetIndices",
            "GetIndices",
            "CreatePixelShader",
            "SetPixelShader",
            "GetPixelShader",
            "SetPixelShaderConstantF",
            "GetPixelShaderConstantF",
            "SetPixelShaderConstantI",
            "GetPixelShaderConstantI",
            "SetPixelShaderConstantB",
            "GetPixelShaderConstantB",
            "DrawRectPatch",
            "DrawTriPatch",
            "DeletePatch",
            "CreateQuery",
            "SetConvolutionMonoKernel",
            "ComposeRects",
            "PresentEx",
            "GetGPUThreadPriority",
            "SetGPUThreadPriority",
            "WaitForVBlank",
            "CheckResourceResidency",
            "SetMaximumFrameLatency",
            "GetMaximumFrameLatency",
            "CheckDeviceState",
            "CreateRenderTargetEx",
            "CreateOffscreenPlainSurfaceEx",
            "CreateDepthStencilSurfaceEx",
            "ResetEx",
            "GetDisplayModeEx",
        };
        return methodsNames;
    }
};

class ID3D10DeviceVTBL : public VTBL
{
private:
    std::vector<const char*>& GetMethods() override {
        static std::vector<const char*> methodsNames {
            "QueryInterface",
            "AddRef",
            "Release",
            "VSSetConstantBuffers",
            "PSSetShaderResources",
            "PSSetShader",
            "PSSetSamplers",
            "VSSetShader",
            "DrawIndexed",
            "Draw",
            "PSSetConstantBuffers",
            "IASetInputLayout",
            "IASetVertexBuffers",
            "IASetIndexBuffer",
            "DrawIndexedInstanced",
            "DrawInstanced",
            "GSSetConstantBuffers",
            "GSSetShader",
            "IASetPrimitiveTopology",
            "VSSetShaderResources",
            "VSSetSamplers",
            "SetPredication",
            "GSSetShaderResources",
            "GSSetSamplers",
            "OMSetRenderTargets",
            "OMSetBlendState",
            "OMSetDepthStencilState",
            "SOSetTargets",
            "DrawAuto",
            "RSSetState",
            "RSSetViewports",
            "RSSetScissorRects",
            "CopySubresourceRegion",
            "CopyResource",
            "UpdateSubresource",
            "ClearRenderTargetView",
            "ClearDepthStencilView",
            "GenerateMips",
            "ResolveSubresource",
            "VSGetConstantBuffers",
            "PSGetShaderResources",
            "PSGetShader",
            "PSGetSamplers",
            "VSGetShader",
            "PSGetConstantBuffers",
            "IAGetInputLayout",
            "IAGetVertexBuffers",
            "IAGetIndexBuffer",
            "GSGetConstantBuffers",
            "GSGetShader",
            "IAGetPrimitiveTopology",
            "VSGetShaderResources",
            "VSGetSamplers",
            "GetPredication",
            "GSGetShaderResources",
            "GSGetSamplers",
            "OMGetRenderTargets",
            "OMGetBlendState",
            "OMGetDepthStencilState",
            "SOGetTargets",
            "RSGetState",
            "RSGetViewports",
            "RSGetScissorRects",
            "GetDeviceRemovedReason",
            "SetExceptionMode",
            "GetExceptionMode",
            "GetPrivateData",
            "SetPrivateData",
            "SetPrivateDataInterface",
            "ClearState",
            "Flush",
            "CreateBuffer",
            "CreateTexture1D",
            "CreateTexture2D",
            "CreateTexture3D",
            "CreateShaderResourceView",
            "CreateRenderTargetView",
            "CreateDepthStencilView",
            "CreateInputLayout",
            "CreateVertexShader",
            "CreateGeometryShader",
            "CreateGeometryShaderWithStreamOutput",
            "CreatePixelShader",
            "CreateBlendState",
            "CreateDepthStencilState",
            "CreateRasterizerState",
            "CreateSamplerState",
            "CreateQuery",
            "CreatePredicate",
            "CreateCounter",
            "CheckFormatSupport",
            "CheckMultisampleQualityLevels",
            "CheckCounterInfo",
            "CheckCounter",
            "GetCreationFlags",
            "OpenSharedResource",
            "SetTextFilterSize",
            "GetTextFilterSize",
        };
        return methodsNames;
    }
};

class ID3D11DeviceVTBL : public VTBL
{
private:
    std::vector<const char*>& GetMethods() override {
        static std::vector<const char*> methodsNames {
            "QueryInterface",
            "AddRef",
            "Release",
            "CreateBuffer",
            "CreateTexture1D",
            "CreateTexture2D",
            "CreateTexture3D",
            "CreateShaderResourceView",
            "CreateUnorderedAccessView",
            "CreateRenderTargetView",
            "CreateDepthStencilView",
            "CreateInputLayout",
            "CreateVertexShader",
            "CreateGeometryShader",
            "CreateGeometryShaderWithStreamOutput",
            "CreatePixelShader",
            "CreateHullShader",
            "CreateDomainShader",
            "CreateComputeShader",
            "CreateClassLinkage",
            "CreateBlendState",
            "CreateDepthStencilState",
            "CreateRasterizerState",
            "CreateSamplerState",
            "CreateQuery",
            "CreatePredicate",
            "CreateCounter",
            "CreateDeferredContext",
            "OpenSharedResource",
            "CheckFormatSupport",
            "CheckMultisampleQualityLevels",
            "CheckCounterInfo",
            "CheckCounter",
            "CheckFeatureSupport",
            "GetPrivateData",
            "SetPrivateData",
            "SetPrivateDataInterface",
            "GetFeatureLevel",
            "GetCreationFlags",
            "GetDeviceRemovedReason",
            "GetImmediateContext",
            "SetExceptionMode",
            "GetExceptionMode",
        };
        return methodsNames;
    }
};

class ID3D11Device2VTBL : public VTBL
{
private:
    std::vector<const char*>& GetMethods() override {
        static std::vector<const char*> methodsNames {
            "QueryInterface",
            "AddRef",
            "Release",
            "CreateBuffer",
            "CreateTexture1D",
            "CreateTexture2D",
            "CreateTexture3D",
            "CreateShaderResourceView",
            "CreateUnorderedAccessView",
            "CreateRenderTargetView",
            "CreateDepthStencilView",
            "CreateInputLayout",
            "CreateVertexShader",
            "CreateGeometryShader",
            "CreateGeometryShaderWithStreamOutput",
            "CreatePixelShader",
            "CreateHullShader",
            "CreateDomainShader",
            "CreateComputeShader",
            "CreateClassLinkage",
            "CreateBlendState",
            "CreateDepthStencilState",
            "CreateRasterizerState",
            "CreateSamplerState",
            "CreateQuery",
            "CreatePredicate",
            "CreateCounter",
            "CreateDeferredContext",
            "OpenSharedResource",
            "CheckFormatSupport",
            "CheckMultisampleQualityLevels",
            "CheckCounterInfo",
            "CheckCounter",
            "CheckFeatureSupport",
            "GetPrivateData",
            "SetPrivateData",
            "SetPrivateDataInterface",
            "GetFeatureLevel",
            "GetCreationFlags",
            "GetDeviceRemovedReason",
            "GetImmediateContext",
            "SetExceptionMode",
            "GetExceptionMode",
            "GetImmediateContext1",
            "CreateDeferredContext1",
            "CreateBlendState1",
            "CreateRasterizerState1",
            "CreateDeviceContextState",
            "OpenSharedResource1",
            "OpenSharedResourceByName",
            "GetImmediateContext2",
            "CreateDeferredContext2",
            "GetResourceTiling",
            "CheckMultisampleQualityLevels1",
        };
        return methodsNames;
    }
};

class ID3D11Device3VTBL : public VTBL
{
private:
    std::vector<const char*>& GetMethods() override {
        static std::vector<const char*> methodsNames {
            "QueryInterface",
            "AddRef",
            "Release",
            "CreateBuffer",
            "CreateTexture1D",
            "CreateTexture2D",
            "CreateTexture3D",
            "CreateShaderResourceView",
            "CreateUnorderedAccessView",
            "CreateRenderTargetView",
            "CreateDepthStencilView",
            "CreateInputLayout",
            "CreateVertexShader",
            "CreateGeometryShader",
            "CreateGeometryShaderWithStreamOutput",
            "CreatePixelShader",
            "CreateHullShader",
            "CreateDomainShader",
            "CreateComputeShader",
            "CreateClassLinkage",
            "CreateBlendState",
            "CreateDepthStencilState",
            "CreateRasterizerState",
            "CreateSamplerState",
            "CreateQuery",
            "CreatePredicate",
            "CreateCounter",
            "CreateDeferredContext",
            "OpenSharedResource",
            "CheckFormatSupport",
            "CheckMultisampleQualityLevels",
            "CheckCounterInfo",
            "CheckCounter",
            "CheckFeatureSupport",
            "GetPrivateData",
            "SetPrivateData",
            "SetPrivateDataInterface",
            "GetFeatureLevel",
            "GetCreationFlags",
            "GetDeviceRemovedReason",
            "GetImmediateContext",
            "SetExceptionMode",
            "GetExceptionMode",
            "GetImmediateContext1",
            "CreateDeferredContext1",
            "CreateBlendState1",
            "CreateRasterizerState1",
            "CreateDeviceContextState",
            "OpenSharedResource1",
            "OpenSharedResourceByName",
            "GetImmediateContext2",
            "CreateDeferredContext2",
            "GetResourceTiling",
            "CheckMultisampleQualityLevels1",
            "CreateTexture2D1",
            "CreateTexture3D1",
            "CreateRasterizerState2",
            "CreateShaderResourceView1",
            "CreateUnorderedAccessView1",
            "CreateRenderTargetView1",
            "CreateQuery1",
            "GetImmediateContext3",
            "CreateDeferredContext3",
            "WriteToSubresource",
            "ReadFromSubresource",
        };
        return methodsNames;
    }
};

class ID3D11Device4VTBL : public VTBL
{
private:
    std::vector<const char*>& GetMethods() override {
        static std::vector<const char*> methodsNames {
            "QueryInterface",
            "AddRef",
            "Release",
            "CreateBuffer",
            "CreateTexture1D",
            "CreateTexture2D",
            "CreateTexture3D",
            "CreateShaderResourceView",
            "CreateUnorderedAccessView",
            "CreateRenderTargetView",
            "CreateDepthStencilView",
            "CreateInputLayout",
            "CreateVertexShader",
            "CreateGeometryShader",
            "CreateGeometryShaderWithStreamOutput",
            "CreatePixelShader",
            "CreateHullShader",
            "CreateDomainShader",
            "CreateComputeShader",
            "CreateClassLinkage",
            "CreateBlendState",
            "CreateDepthStencilState",
            "CreateRasterizerState",
            "CreateSamplerState",
            "CreateQuery",
            "CreatePredicate",
            "CreateCounter",
            "CreateDeferredContext",
            "OpenSharedResource",
            "CheckFormatSupport",
            "CheckMultisampleQualityLevels",
            "CheckCounterInfo",
            "CheckCounter",
            "CheckFeatureSupport",
            "GetPrivateData",
            "SetPrivateData",
            "SetPrivateDataInterface",
            "GetFeatureLevel",
            "GetCreationFlags",
            "GetDeviceRemovedReason",
            "GetImmediateContext",
            "SetExceptionMode",
            "GetExceptionMode",
            "GetImmediateContext1",
            "CreateDeferredContext1",
            "CreateBlendState1",
            "CreateRasterizerState1",
            "CreateDeviceContextState",
            "OpenSharedResource1",
            "OpenSharedResourceByName",
            "GetImmediateContext2",
            "CreateDeferredContext2",
            "GetResourceTiling",
            "CheckMultisampleQualityLevels1",
            "CreateTexture2D1",
            "CreateTexture3D1",
            "CreateRasterizerState2",
            "CreateShaderResourceView1",
            "CreateUnorderedAccessView1",
            "CreateRenderTargetView1",
            "CreateQuery1",
            "GetImmediateContext3",
            "CreateDeferredContext3",
            "WriteToSubresource",
            "ReadFromSubresource",
            "RegisterDeviceRemovedEvent",
            "UnregisterDeviceRemoved",
        };
        return methodsNames;
    }
};

class ID3D11Device5VTBL : public VTBL
{
private:
    std::vector<const char*>& GetMethods() override {
        static std::vector<const char*> methodsNames {
            "QueryInterface",
            "AddRef",
            "Release",
            "CreateBuffer",
            "CreateTexture1D",
            "CreateTexture2D",
            "CreateTexture3D",
            "CreateShaderResourceView",
            "CreateUnorderedAccessView",
            "CreateRenderTargetView",
            "CreateDepthStencilView",
            "CreateInputLayout",
            "CreateVertexShader",
            "CreateGeometryShader",
            "CreateGeometryShaderWithStreamOutput",
            "CreatePixelShader",
            "CreateHullShader",
            "CreateDomainShader",
            "CreateComputeShader",
            "CreateClassLinkage",
            "CreateBlendState",
            "CreateDepthStencilState",
            "CreateRasterizerState",
            "CreateSamplerState",
            "CreateQuery",
            "CreatePredicate",
            "CreateCounter",
            "CreateDeferredContext",
            "OpenSharedResource",
            "CheckFormatSupport",
            "CheckMultisampleQualityLevels",
            "CheckCounterInfo",
            "CheckCounter",
            "CheckFeatureSupport",
            "GetPrivateData",
            "SetPrivateData",
            "SetPrivateDataInterface",
            "GetFeatureLevel",
            "GetCreationFlags",
            "GetDeviceRemovedReason",
            "GetImmediateContext",
            "SetExceptionMode",
            "GetExceptionMode",
            "GetImmediateContext1",
            "CreateDeferredContext1",
            "CreateBlendState1",
            "CreateRasterizerState1",
            "CreateDeviceContextState",
            "OpenSharedResource1",
            "OpenSharedResourceByName",
            "GetImmediateContext2",
            "CreateDeferredContext2",
            "GetResourceTiling",
            "CheckMultisampleQualityLevels1",
            "CreateTexture2D1",
            "CreateTexture3D1",
            "CreateRasterizerState2",
            "CreateShaderResourceView1",
            "CreateUnorderedAccessView1",
            "CreateRenderTargetView1",
            "CreateQuery1",
            "GetImmediateContext3",
            "CreateDeferredContext3",
            "WriteToSubresource",
            "ReadFromSubresource",
            "RegisterDeviceRemovedEvent",
            "UnregisterDeviceRemoved",
            "OpenSharedFence",
            "CreateFence",
        };
        return methodsNames;
    }
};

class ID3D11DeviceContextVTBL : public VTBL
{
private:
    std::vector<const char*>& GetMethods() override {
        static std::vector<const char*> methodsNames {
            "QueryInterface",
            "AddRef",
            "Release",
            "GetDevice",
            "GetPrivateData",
            "SetPrivateData",
            "SetPrivateDataInterface",
            "VSSetConstantBuffers",
            "PSSetShaderResources",
            "PSSetShader",
            "PSSetSamplers",
            "VSSetShader",
            "DrawIndexed",
            "Draw",
            "Map",
            "Unmap",
            "PSSetConstantBuffers",
            "IASetInputLayout",
            "IASetVertexBuffers",
            "IASetIndexBuffer",
            "DrawIndexedInstanced",
            "DrawInstanced",
            "GSSetConstantBuffers",
            "GSSetShader",
            "IASetPrimitiveTopology",
            "VSSetShaderResources",
            "VSSetSamplers",
            "Begin",
            "End",
            "GetData",
            "SetPredication",
            "GSSetShaderResources",
            "GSSetSamplers",
            "OMSetRenderTargets",
            "OMSetRenderTargetsAndUnorderedAccessViews",
            "OMSetBlendState",
            "OMSetDepthStencilState",
            "SOSetTargets",
            "DrawAuto",
            "DrawIndexedInstancedIndirect",
            "DrawInstancedIndirect",
            "Dispatch",
            "DispatchIndirect",
            "RSSetState",
            "RSSetViewports",
            "RSSetScissorRects",
            "CopySubresourceRegion",
            "CopyResource",
            "UpdateSubresource",
            "CopyStructureCount",
            "ClearRenderTargetView",
            "ClearUnorderedAccessViewUint",
            "ClearUnorderedAccessViewFloat",
            "ClearDepthStencilView",
            "GenerateMips",
            "SetResourceMinLOD",
            "GetResourceMinLOD",
            "ResolveSubresource",
            "ExecuteCommandList",
            "HSSetShaderResources",
            "HSSetShader",
            "HSSetSamplers",
            "HSSetConstantBuffers",
            "DSSetShaderResources",
            "DSSetShader",
            "DSSetSamplers",
            "DSSetConstantBuffers",
            "CSSetShaderResources",
            "CSSetUnorderedAccessViews",
            "CSSetShader",
            "CSSetSamplers",
            "CSSetConstantBuffers",
            "VSGetConstantBuffers",
            "PSGetShaderResources",
            "PSGetShader",
            "PSGetSamplers",
            "VSGetShader",
            "PSGetConstantBuffers",
            "IAGetInputLayout",
            "IAGetVertexBuffers",
            "IAGetIndexBuffer",
            "GSGetConstantBuffers",
            "GSGetShader",
            "IAGetPrimitiveTopology",
            "VSGetShaderResources",
            "VSGetSamplers",
            "GetPredication",
            "GSGetShaderResources",
            "GSGetSamplers",
            "OMGetRenderTargets",
            "OMGetRenderTargetsAndUnorderedAccessViews",
            "OMGetBlendState",
            "OMGetDepthStencilState",
            "SOGetTargets",
            "RSGetState",
            "RSGetViewports",
            "RSGetScissorRects",
            "HSGetShaderResources",
            "HSGetShader",
            "HSGetSamplers",
            "HSGetConstantBuffers",
            "DSGetShaderResources",
            "DSGetShader",
            "DSGetSamplers",
            "DSGetConstantBuffers",
            "CSGetShaderResources",
            "CSGetUnorderedAccessViews",
            "CSGetShader",
            "CSGetSamplers",
            "CSGetConstantBuffers",
            "ClearState",
            "Flush",
            "GetType",
            "GetContextFlags",
            "FinishCommandList",
        };
        return methodsNames;
    }
};

class ID3D11DeviceContext2VTBL : public VTBL
{
private:
    std::vector<const char*>& GetMethods() override {
        static std::vector<const char*> methodsNames {
            "QueryInterface",
            "AddRef",
            "Release",
            "GetDevice",
            "GetPrivateData",
            "SetPrivateData",
            "SetPrivateDataInterface",
            "VSSetConstantBuffers",
            "PSSetShaderResources",
            "PSSetShader",
            "PSSetSamplers",
            "VSSetShader",
            "DrawIndexed",
            "Draw",
            "Map",
            "Unmap",
            "PSSetConstantBuffers",
            "IASetInputLayout",
            "IASetVertexBuffers",
            "IASetIndexBuffer",
            "DrawIndexedInstanced",
            "DrawInstanced",
            "GSSetConstantBuffers",
            "GSSetShader",
            "IASetPrimitiveTopology",
            "VSSetShaderResources",
            "VSSetSamplers",
            "Begin",
            "End",
            "GetData",
            "SetPredication",
            "GSSetShaderResources",
            "GSSetSamplers",
            "OMSetRenderTargets",
            "OMSetRenderTargetsAndUnorderedAccessViews",
            "OMSetBlendState",
            "OMSetDepthStencilState",
            "SOSetTargets",
            "DrawAuto",
            "DrawIndexedInstancedIndirect",
            "DrawInstancedIndirect",
            "Dispatch",
            "DispatchIndirect",
            "RSSetState",
            "RSSetViewports",
            "RSSetScissorRects",
            "CopySubresourceRegion",
            "CopyResource",
            "UpdateSubresource",
            "CopyStructureCount",
            "ClearRenderTargetView",
            "ClearUnorderedAccessViewUint",
            "ClearUnorderedAccessViewFloat",
            "ClearDepthStencilView",
            "GenerateMips",
            "SetResourceMinLOD",
            "GetResourceMinLOD",
            "ResolveSubresource",
            "ExecuteCommandList",
            "HSSetShaderResources",
            "HSSetShader",
            "HSSetSamplers",
            "HSSetConstantBuffers",
            "DSSetShaderResources",
            "DSSetShader",
            "DSSetSamplers",
            "DSSetConstantBuffers",
            "CSSetShaderResources",
            "CSSetUnorderedAccessViews",
            "CSSetShader",
            "CSSetSamplers",
            "CSSetConstantBuffers",
            "VSGetConstantBuffers",
            "PSGetShaderResources",
            "PSGetShader",
            "PSGetSamplers",
            "VSGetShader",
            "PSGetConstantBuffers",
            "IAGetInputLayout",
            "IAGetVertexBuffers",
            "IAGetIndexBuffer",
            "GSGetConstantBuffers",
            "GSGetShader",
            "IAGetPrimitiveTopology",
            "VSGetShaderResources",
            "VSGetSamplers",
            "GetPredication",
            "GSGetShaderResources",
            "GSGetSamplers",
            "OMGetRenderTargets",
            "OMGetRenderTargetsAndUnorderedAccessViews",
            "OMGetBlendState",
            "OMGetDepthStencilState",
            "SOGetTargets",
            "RSGetState",
            "RSGetViewports",
            "RSGetScissorRects",
            "HSGetShaderResources",
            "HSGetShader",
            "HSGetSamplers",
            "HSGetConstantBuffers",
            "DSGetShaderResources",
            "DSGetShader",
            "DSGetSamplers",
            "DSGetConstantBuffers",
            "CSGetShaderResources",
            "CSGetUnorderedAccessViews",
            "CSGetShader",
            "CSGetSamplers",
            "CSGetConstantBuffers",
            "ClearState",
            "Flush",
            "GetType",
            "GetContextFlags",
            "FinishCommandList",
            "CopySubresourceRegion1",
            "UpdateSubresource1",
            "DiscardResource",
            "DiscardView",
            "VSSetConstantBuffers1",
            "HSSetConstantBuffers1",
            "DSSetConstantBuffers1",
            "GSSetConstantBuffers1",
            "PSSetConstantBuffers1",
            "CSSetConstantBuffers1",
            "VSGetConstantBuffers1",
            "HSGetConstantBuffers1",
            "DSGetConstantBuffers1",
            "GSGetConstantBuffers1",
            "PSGetConstantBuffers1",
            "CSGetConstantBuffers1",
            "SwapDeviceContextState",
            "ClearView",
            "DiscardView1",
            "UpdateTileMappings",
            "CopyTileMappings",
            "CopyTiles",
            "UpdateTiles",
            "ResizeTilePool",
            "TiledResourceBarrier",
            "IsAnnotationEnabled",
            "SetMarkerInt",
            "BeginEventInt",
            "EndEvent",
        };
        return methodsNames;
    }
};

class ID3D11DeviceContext3VTBL : public VTBL
{
private:
    std::vector<const char*>& GetMethods() override {
        static std::vector<const char*> methodsNames {
            "QueryInterface",
            "AddRef",
            "Release",
            "GetDevice",
            "GetPrivateData",
            "SetPrivateData",
            "SetPrivateDataInterface",
            "VSSetConstantBuffers",
            "PSSetShaderResources",
            "PSSetShader",
            "PSSetSamplers",
            "VSSetShader",
            "DrawIndexed",
            "Draw",
            "Map",
            "Unmap",
            "PSSetConstantBuffers",
            "IASetInputLayout",
            "IASetVertexBuffers",
            "IASetIndexBuffer",
            "DrawIndexedInstanced",
            "DrawInstanced",
            "GSSetConstantBuffers",
            "GSSetShader",
            "IASetPrimitiveTopology",
            "VSSetShaderResources",
            "VSSetSamplers",
            "Begin",
            "End",
            "GetData",
            "SetPredication",
            "GSSetShaderResources",
            "GSSetSamplers",
            "OMSetRenderTargets",
            "OMSetRenderTargetsAndUnorderedAccessViews",
            "OMSetBlendState",
            "OMSetDepthStencilState",
            "SOSetTargets",
            "DrawAuto",
            "DrawIndexedInstancedIndirect",
            "DrawInstancedIndirect",
            "Dispatch",
            "DispatchIndirect",
            "RSSetState",
            "RSSetViewports",
            "RSSetScissorRects",
            "CopySubresourceRegion",
            "CopyResource",
            "UpdateSubresource",
            "CopyStructureCount",
            "ClearRenderTargetView",
            "ClearUnorderedAccessViewUint",
            "ClearUnorderedAccessViewFloat",
            "ClearDepthStencilView",
            "GenerateMips",
            "SetResourceMinLOD",
            "GetResourceMinLOD",
            "ResolveSubresource",
            "ExecuteCommandList",
            "HSSetShaderResources",
            "HSSetShader",
            "HSSetSamplers",
            "HSSetConstantBuffers",
            "DSSetShaderResources",
            "DSSetShader",
            "DSSetSamplers",
            "DSSetConstantBuffers",
            "CSSetShaderResources",
            "CSSetUnorderedAccessViews",
            "CSSetShader",
            "CSSetSamplers",
            "CSSetConstantBuffers",
            "VSGetConstantBuffers",
            "PSGetShaderResources",
            "PSGetShader",
            "PSGetSamplers",
            "VSGetShader",
            "PSGetConstantBuffers",
            "IAGetInputLayout",
            "IAGetVertexBuffers",
            "IAGetIndexBuffer",
            "GSGetConstantBuffers",
            "GSGetShader",
            "IAGetPrimitiveTopology",
            "VSGetShaderResources",
            "VSGetSamplers",
            "GetPredication",
            "GSGetShaderResources",
            "GSGetSamplers",
            "OMGetRenderTargets",
            "OMGetRenderTargetsAndUnorderedAccessViews",
            "OMGetBlendState",
            "OMGetDepthStencilState",
            "SOGetTargets",
            "RSGetState",
            "RSGetViewports",
            "RSGetScissorRects",
            "HSGetShaderResources",
            "HSGetShader",
            "HSGetSamplers",
            "HSGetConstantBuffers",
            "DSGetShaderResources",
            "DSGetShader",
            "DSGetSamplers",
            "DSGetConstantBuffers",
            "CSGetShaderResources",
            "CSGetUnorderedAccessViews",
            "CSGetShader",
            "CSGetSamplers",
            "CSGetConstantBuffers",
            "ClearState",
            "Flush",
            "GetType",
            "GetContextFlags",
            "FinishCommandList",
            "CopySubresourceRegion1",
            "UpdateSubresource1",
            "DiscardResource",
            "DiscardView",
            "VSSetConstantBuffers1",
            "HSSetConstantBuffers1",
            "DSSetConstantBuffers1",
            "GSSetConstantBuffers1",
            "PSSetConstantBuffers1",
            "CSSetConstantBuffers1",
            "VSGetConstantBuffers1",
            "HSGetConstantBuffers1",
            "DSGetConstantBuffers1",
            "GSGetConstantBuffers1",
            "PSGetConstantBuffers1",
            "CSGetConstantBuffers1",
            "SwapDeviceContextState",
            "ClearView",
            "DiscardView1",
            "UpdateTileMappings",
            "CopyTileMappings",
            "CopyTiles",
            "UpdateTiles",
            "ResizeTilePool",
            "TiledResourceBarrier",
            "IsAnnotationEnabled",
            "SetMarkerInt",
            "BeginEventInt",
            "EndEvent",
            "Flush1",
            "SetHardwareProtectionState",
            "GetHardwareProtectionState",

        };
        return methodsNames;
    }
};

class ID3D12DeviceVTBL : public VTBL
{
private:
    std::vector<const char*>& GetMethods() override {
        static std::vector<const char*> methodsNames {
            "QueryInterface",
            "AddRef",
            "Release",
            "GetPrivateData",
            "SetPrivateData",
            "SetPrivateDataInterface",
            "SetName",
            "GetNodeCount",
            "CreateCommandQueue",
            "CreateCommandAllocator",
            "CreateGraphicsPipelineState",
            "CreateComputePipelineState",
            "CreateCommandList",
            "CheckFeatureSupport",
            "CreateDescriptorHeap",
            "GetDescriptorHandleIncrementSize",
            "CreateRootSignature",
            "CreateConstantBufferView",
            "CreateShaderResourceView",
            "CreateUnorderedAccessView",
            "CreateRenderTargetView",
            "CreateDepthStencilView",
            "CreateSampler",
            "CopyDescriptors",
            "CopyDescriptorsSimple",
            "GetResourceAllocationInfo",
            "GetCustomHeapProperties",
            "CreateCommittedResource",
            "CreateHeap",
            "CreatePlacedResource",
            "CreateReservedResource",
            "CreateSharedHandle",
            "OpenSharedHandle",
            "OpenSharedHandleByName",
            "MakeResident",
            "Evict",
            "CreateFence",
            "GetDeviceRemovedReason",
            "GetCopyableFootprints",
            "CreateQueryHeap",
            "SetStablePowerState",
            "CreateCommandSignature",
            "GetResourceTiling",
            "GetAdapterLuid",
        };
        return methodsNames;
    }
};

class IDirect3DDevice12CommandQueueVTBL : public VTBL
{
private:
    std::vector<const char*>& GetMethods() override {
        static std::vector<const char*> methodsNames {
            "QueryInterface",
            "AddRef",
            "Release",
            "GetPrivateData",
            "SetPrivateData",
            "SetPrivateDataInterface",
            "SetName",
            "GetDevice",
            "UpdateTileMappings",
            "CopyTileMappings",
            "ExecuteCommandLists",
            "SetMarker",
            "BeginEvent",
            "EndEvent",
            "Signal",
            "Wait",
            "GetTimestampFrequency",
            "GetClockCalibration",
            "GetDesc",
        };
        return methodsNames;
    }
};

class IDirect3DDevice12CommandAllocatorVTBL : public VTBL
{
private:
    std::vector<const char*>& GetMethods() override {
        static std::vector<const char*> methodsNames {
            "QueryInterface",
            "AddRef",
            "Release",
            "GetPrivateData",
            "SetPrivateData",
            "SetPrivateDataInterface",
            "SetName",
            "GetDevice",
            "Reset",
        };
        return methodsNames;
    }
};

class ID3D12GraphicsCommandListVTBL : public VTBL
{
private:
    std::vector<const char*>& GetMethods() override {
        static std::vector<const char*> methodsNames {
            "QueryInterface",
            "AddRef",
            "Release",
            "GetPrivateData",
            "SetPrivateData",
            "SetPrivateDataInterface",
            "SetName",
            "GetDevice",
            "GetType",
            "Close",
            "Reset",
            "ClearState",
            "DrawInstanced",
            "DrawIndexedInstanced",
            "Dispatch",
            "CopyBufferRegion",
            "CopyTextureRegion",
            "CopyResource",
            "CopyTiles",
            "ResolveSubresource",
            "IASetPrimitiveTopology",
            "RSSetViewports",
            "RSSetScissorRects",
            "OMSetBlendFactor",
            "OMSetStencilRef",
            "SetPipelineState",
            "ResourceBarrier",
            "ExecuteBundle",
            "SetDescriptorHeaps",
            "SetComputeRootSignature",
            "SetGraphicsRootSignature",
            "SetComputeRootDescriptorTable",
            "SetGraphicsRootDescriptorTable",
            "SetComputeRoot32BitConstant",
            "SetGraphicsRoot32BitConstant",
            "SetComputeRoot32BitConstants",
            "SetGraphicsRoot32BitConstants",
            "SetComputeRootConstantBufferView",
            "SetGraphicsRootConstantBufferView",
            "SetComputeRootShaderResourceView",
            "SetGraphicsRootShaderResourceView",
            "SetComputeRootUnorderedAccessView",
            "SetGraphicsRootUnorderedAccessView",
            "IASetIndexBuffer",
            "IASetVertexBuffers",
            "SOSetTargets",
            "OMSetRenderTargets",
            "ClearDepthStencilView",
            "ClearRenderTargetView",
            "ClearUnorderedAccessViewUint",
            "ClearUnorderedAccessViewFloat",
            "DiscardResource",
            "BeginQuery",
            "EndQuery",
            "ResolveQueryData",
            "SetPredication",
            "SetMarker",
            "BeginEvent",
            "EndEvent",
            "ExecuteIndirect",
        };
        return methodsNames;
    }
};

class IDXGISwapChainVTBL : public VTBL
{
private:
    std::vector<const char*>& GetMethods() override {
        static std::vector<const char*> methodsNames {
            "QueryInterface",
            "AddRef",
            "Release",
            "SetPrivateData",
            "SetPrivateDataInterface",
            "GetPrivateData",
            "GetParent",
            "GetDevice",
            "Present",
            "GetBuffer",
            "SetFullscreenState",
            "GetFullscreenState",
            "GetDesc",
            "ResizeBuffers",
            "ResizeTarget",
            "GetContainingOutput",
            "GetFrameStatistics",
            "GetLastPresentCount",
        };
        return methodsNames;
    }
};

class IDXGISwapChain1VTBL : public VTBL
{
private:
    std::vector<const char*>& GetMethods() override {
        static std::vector<const char*> methodsNames {
            "QueryInterface",
            "AddRef",
            "Release",
            "SetPrivateData",
            "SetPrivateDataInterface",
            "GetPrivateData",
            "GetParent",
            "GetDevice",
            "Present",
            "GetBuffer",
            "SetFullscreenState",
            "GetFullscreenState",
            "GetDesc",
            "ResizeBuffers",
            "ResizeTarget",
            "GetContainingOutput",
            "GetFrameStatistics",
            "GetLastPresentCount",
            "GetDesc1",
            "GetFullscreenDesc",
            "GetHwnd",
            "GetCoreWindow",
            "Present1",
            "IsTemporaryMonoSupported",
            "GetRestrictToOutput",
            "SetBackgroundColor",
            "GetBackgroundColor",
            "SetRotation",
            "GetRotation",
        };
        return methodsNames;
    }
};

class OpenGLVTBL : public VTBL
{
private:
    std::vector<const char*>& GetMethods() override {
        static std::vector<const char*> methodsNames {
            "glAccum",
            "glAlphaFunc",
            "glAreTexturesResident",
            "glArrayElement",
            "glBegin",
            "glBindTexture",
            "glBitmap",
            "glBlendFunc",
            "glCallList",
            "glCallLists",
            "glClear",
            "glClearAccum",
            "glClearColor",
            "glClearDepth",
            "glClearIndex",
            "glClearStencil",
            "glClipPlane",
            "glColor3b",
            "glColor3bv",
            "glColor3d",
            "glColor3dv",
            "glColor3f",
            "glColor3fv",
            "glColor3i",
            "glColor3iv",
            "glColor3s",
            "glColor3sv",
            "glColor3ub",
            "glColor3ubv",
            "glColor3ui",
            "glColor3uiv",
            "glColor3us",
            "glColor3usv",
            "glColor4b",
            "glColor4bv",
            "glColor4d",
            "glColor4dv",
            "glColor4f",
            "glColor4fv",
            "glColor4i",
            "glColor4iv",
            "glColor4s",
            "glColor4sv",
            "glColor4ub",
            "glColor4ubv",
            "glColor4ui",
            "glColor4uiv",
            "glColor4us",
            "glColor4usv",
            "glColorMask",
            "glColorMaterial",
            "glColorPointer",
            "glCopyPixels",
            "glCopyTexImage1D",
            "glCopyTexImage2D",
            "glCopyTexSubImage1D",
            "glCopyTexSubImage2D",
            "glCullFaceglCullFace",
            "glDeleteLists",
            "glDeleteTextures",
            "glDepthFunc",
            "glDepthMask",
            "glDepthRange",
            "glDisable",
            "glDisableClientState",
            "glDrawArrays",
            "glDrawBuffer",
            "glDrawElements",
            "glDrawPixels",
            "glEdgeFlag",
            "glEdgeFlagPointer",
            "glEdgeFlagv",
            "glEnable",
            "glEnableClientState",
            "glEnd",
            "glEndList",
            "glEvalCoord1d",
            "glEvalCoord1dv",
            "glEvalCoord1f",
            "glEvalCoord1fv",
            "glEvalCoord2d",
            "glEvalCoord2dv",
            "glEvalCoord2f",
            "glEvalCoord2fv",
            "glEvalMesh1",
            "glEvalMesh2",
            "glEvalPoint1",
            "glEvalPoint2",
            "glFeedbackBuffer",
            "glFinish",
            "glFlush",
            "glFogf",
            "glFogfv",
            "glFogi",
            "glFogiv",
            "glFrontFace",
            "glFrustum",
            "glGenLists",
            "glGenTextures",
            "glGetBooleanv",
            "glGetClipPlane",
            "glGetDoublev",
            "glGetError",
            "glGetFloatv",
            "glGetIntegerv",
            "glGetLightfv",
            "glGetLightiv",
            "glGetMapdv",
            "glGetMapfv",
            "glGetMapiv",
            "glGetMaterialfv",
            "glGetMaterialiv",
            "glGetPixelMapfv",
            "glGetPixelMapuiv",
            "glGetPixelMapusv",
            "glGetPointerv",
            "glGetPolygonStipple",
            "glGetString",
            "glGetTexEnvfv",
            "glGetTexEnviv",
            "glGetTexGendv",
            "glGetTexGenfv",
            "glGetTexGeniv",
            "glGetTexImage",
            "glGetTexLevelParameterfv",
            "glGetTexLevelParameteriv",
            "glGetTexParameterfv",
            "glGetTexParameteriv",
            "glHint",
            "glIndexMask",
            "glIndexPointer",
            "glIndexd",
            "glIndexdv",
            "glIndexf",
            "glIndexfv",
            "glIndexi",
            "glIndexiv",
            "glIndexs",
            "glIndexsv",
            "glIndexub",
            "glIndexubv",
            "glInitNames",
            "glInterleavedArrays",
            "glIsEnabled",
            "glIsList",
            "glIsTexture",
            "glLightModelf",
            "glLightModelfv",
            "glLightModeli",
            "glLightModeliv",
            "glLightf",
            "glLightfv",
            "glLighti",
            "glLightiv",
            "glLineStipple",
            "glLineWidth",
            "glListBase",
            "glLoadIdentity",
            "glLoadMatrixd",
            "glLoadMatrixf",
            "glLoadName",
            "glLogicOp",
            "glMap1d",
            "glMap1f",
            "glMap2d",
            "glMap2f",
            "glMapGrid1d",
            "glMapGrid1f",
            "glMapGrid2d",
            "glMapGrid2f",
            "glMaterialf",
            "glMaterialfv",
            "glMateriali",
            "glMaterialiv",
            "glMatrixMode",
            "glMultMatrixd",
            "glMultMatrixf",
            "glNewList",
            "glNormal3b",
            "glNormal3bv",
            "glNormal3d",
            "glNormal3dv",
            "glNormal3f",
            "glNormal3fv",
            "glNormal3i",
            "glNormal3iv",
            "glNormal3s",
            "glNormal3sv",
            "glNormalPointer",
            "glOrtho",
            "glPassThrough",
            "glPixelMapfv",
            "glPixelMapuiv",
            "glPixelMapusv",
            "glPixelStoref",
            "glPixelStorei",
            "glPixelTransferf",
            "glPixelTransferi",
            "glPixelZoom",
            "glPointSize",
            "glPolygonMode",
            "glPolygonOffset",
            "glPolygonStipple",
            "glPopAttrib",
            "glPopClientAttrib",
            "glPopMatrix",
            "glPopName",
            "glPrioritizeTextures",
            "glPushAttrib",
            "glPushClientAttrib",
            "glPushMatrix",
            "glPushName",
            "glRasterPos2d",
            "glRasterPos2dv",
            "glRasterPos2f",
            "glRasterPos2fv",
            "glRasterPos2i",
            "glRasterPos2iv",
            "glRasterPos2s",
            "glRasterPos2sv",
            "glRasterPos3d",
            "glRasterPos3dv",
            "glRasterPos3f",
            "glRasterPos3fv",
            "glRasterPos3i",
            "glRasterPos3iv",
            "glRasterPos3s",
            "glRasterPos3sv",
            "glRasterPos4d",
            "glRasterPos4dv",
            "glRasterPos4f",
            "glRasterPos4fv",
            "glRasterPos4i",
            "glRasterPos4iv",
            "glRasterPos4s",
            "glRasterPos4sv",
            "glReadBuffer",
            "glReadPixels",
            "glRectd",
            "glRectdv",
            "glRectf",
            "glRectfv",
            "glRecti",
            "glRectiv",
            "glRects",
            "glRectsv",
            "glRenderMode",
            "glRotated",
            "glRotatef",
            "glScaled",
            "glScalef",
            "glScissor",
            "glSelectBuffer",
            "glShadeModel",
            "glStencilFunc",
            "glStencilMask",
            "glStencilOp",
            "glTexCoord1d",
            "glTexCoord1dv",
            "glTexCoord1f",
            "glTexCoord1fv",
            "glTexCoord1i",
            "glTexCoord1iv",
            "glTexCoord1s",
            "glTexCoord1sv",
            "glTexCoord2d",
            "glTexCoord2dv",
            "glTexCoord2f",
            "glTexCoord2fv",
            "glTexCoord2i",
            "glTexCoord2iv",
            "glTexCoord2s",
            "glTexCoord2sv",
            "glTexCoord3d",
            "glTexCoord3dv",
            "glTexCoord3f",
            "glTexCoord3fv",
            "glTexCoord3i",
            "glTexCoord3iv",
            "glTexCoord3s",
            "glTexCoord3sv",
            "glTexCoord4d",
            "glTexCoord4dv",
            "glTexCoord4f",
            "glTexCoord4fv",
            "glTexCoord4i",
            "glTexCoord4iv",
            "glTexCoord4s",
            "glTexCoord4sv",
            "glTexCoordPointer",
            "glTexEnvf",
            "glTexEnvfv",
            "glTexEnvi",
            "glTexEnviv",
            "glTexGend",
            "glTexGendv",
            "glTexGenf",
            "glTexGenfv",
            "glTexGeni",
            "glTexGeniv",
            "glTexImage1D",
            "glTexImage2D",
            "glTexParameterf",
            "glTexParameterfv",
            "glTexParameteri",
            "glTexParameteriv",
            "glTexSubImage1D",
            "glTexSubImage2D",
            "glTranslated",
            "glTranslatef",
            "glVertex2d",
            "glVertex2dv",
            "glVertex2f",
            "glVertex2fv",
            "glVertex2i",
            "glVertex2iv",
            "glVertex2s",
            "glVertex2sv",
            "glVertex3d",
            "glVertex3dv",
            "glVertex3f",
            "glVertex3fv",
            "glVertex3i",
            "glVertex3iv",
            "glVertex3s",
            "glVertex3sv",
            "glVertex4d",
            "glVertex4dv",
            "glVertex4f",
            "glVertex4fv",
            "glVertex4i",
            "glVertex4iv",
            "glVertex4s",
            "glVertex4sv",
            "glVertexPointer",
            "glViewport",
            "wglSwapBuffers"
        };
        return methodsNames;
    }
};

class VulkanVTBL : public VTBL
{
private:
    std::vector<const char*>& GetMethods() override {
        static std::vector<const char*> methodsNames {
            "vkAcquireNextImageKHR",
            "vkAcquireNextImage2KHR",
            "vkQueuePresentKHR",
            "vkCreateSwapchainKHR",
            "vkCreateDevice"
        };
        return methodsNames;
    }
};
#endif